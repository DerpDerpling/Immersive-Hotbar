package derp.immersivehotbar.config;

import dev.isxander.yacl3.api.*;
import dev.isxander.yacl3.api.controller.*;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;

import java.awt.*;

import static derp.immersivehotbar.config.ImmersiveHotbarConfig.*;

public class ImmersiveHotbarConfigScreen {
    public static Screen create(Screen parent) {
        return YetAnotherConfigLib.createBuilder()
                .title(Text.translatable("immersivehotbar.title"))

                // Hotbar Config
                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("immersivehotbar.category.hotbar"))
                        .tooltip(Text.translatable("immersivehotbar.tooltip.hotbar"))
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("immersivehotbar.group.tooltip_position"))
                                .description(OptionDescription.of(Text.translatable("immersivehotbar.group.tooltip_position.desc")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.tooltip_animation"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.tooltip_animation.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(true, () -> immersiveToolTip, v -> immersiveToolTip = v)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.tooltip_y_offset_toggle"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.tooltip_y_offset_toggle.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(false, () -> tooltipYOffsetEnabled, v -> tooltipYOffsetEnabled = v)
                                        .build())
                                .option(Option.<Integer>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.tooltip_y_offset"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.tooltip_y_offset.desc")))
                                        .controller(o -> IntegerSliderControllerBuilder.create(o).range(40, 300).step(1))
                                        .binding(52, () -> tooltipYOffset, v -> tooltipYOffset = v)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.scale_tooltip_offset"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.scale_tooltip_offset.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(true, () -> scaleTooltipOffset, v -> scaleTooltipOffset = v)
                                        .build())
                                .build())
                        // Item Scaling
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("immersivehotbar.group.item_scaling"))
                                .description(OptionDescription.of(Text.translatable("immersivehotbar.group.item_scaling.desc")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.should_grow"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.should_grow.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(true, () -> shouldItemGrowWhenSelected, v -> shouldItemGrowWhenSelected = v)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.selected_scale"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.selected_scale.desc")))
                                        .controller(o -> FloatSliderControllerBuilder.create(o).range(0.1f, 2.0f).step(0.1f))
                                        .binding(1.2f, () -> selectedItemSize, v -> selectedItemSize = v)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.unselected_scale"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.unselected_scale.desc")))
                                        .controller(o -> FloatSliderControllerBuilder.create(o).range(0.1f, 1.0f).step(0.1f))
                                        .binding(1.0f, () -> nonSelectedItemSize, v -> nonSelectedItemSize = v)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.shrink_speed"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.shrink_speed.desc")))
                                        .controller(o -> FloatSliderControllerBuilder.create(o).range(1f, 5.0f).step(0.1f))
                                        .binding(2.5f, () -> shrinkAnimationSpeed, v -> shrinkAnimationSpeed = v)
                                        .build())

                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.text_scaling"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.text_scaling.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(true, () -> textScales, v -> textScales = v)
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("immersivehotbar.group.animations"))
                                .description(OptionDescription.of(Text.translatable("immersivehotbar.group.animations.desc")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.tool_animates"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.tool_animates.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(false, () -> toolAnimates, val -> toolAnimates = val)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.weapon_animates"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.weapon_animates.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(false, () -> weaponAnimates, val -> weaponAnimates = val)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.durability_animates"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.durability_animates.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(true, () -> durabilityAnimates, v -> durabilityAnimates = v)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.food_animates"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.food_animates.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(true, () -> foodAnimates, v -> foodAnimates = v)
                                        .build())
                                .build())

                        // Glow Effects
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("immersivehotbar.group.glow_effects"))
                                .description(OptionDescription.of(Text.translatable("immersivehotbar.group.glow_effects.desc")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.durability_glow"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.durability_glow.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(false, () -> lowDurabilityGlow, v -> lowDurabilityGlow = v)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.glow_threshold"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.glow_threshold.desc")))
                                        .controller(o -> FloatSliderControllerBuilder.create(o).range(0.0f, 1.0f).step(0.01f))
                                        .binding(0.8f, () -> durabilityGlowThreshold, v -> durabilityGlowThreshold = v)
                                        .build())
                                .build())

                        // Background Style
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("immersivehotbar.group.background_style"))
                                .description(OptionDescription.of(Text.translatable("immersivehotbar.group.background_style.desc")))
                                .option(Option.<shouldShowBackground>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.show_background"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.show_background.desc")))
                                        .controller(o -> EnumControllerBuilder.create(o).enumClass(shouldShowBackground.class))
                                        .binding(shouldShowBackground.DISABLED, () -> showBackground, v -> showBackground = v)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.selection_color"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.selection_color.desc")))
                                        .controller(o -> ColorControllerBuilder.create(o).allowAlpha(true))
                                        .binding(new Color(255, 255, 255, 127), () -> hotbarSelectionColor, v -> hotbarSelectionColor = v)
                                        .build())
                                .build())
                        .build())

                // CATEGORY: ADVANCED ANIMATIONS
                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("immersivehotbar.category.advanced_animation"))
                        .tooltip(Text.translatable("immersivehotbar.tooltip.advanced_animation"))

                        // Bouncy Animation
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("immersivehotbar.group.bouncy_animation"))
                                .description(OptionDescription.of(Text.translatable("immersivehotbar.group.bouncy_animation.desc")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.bouncy_animation"))
                                        .description(OptionDescription.createBuilder()
                                                .text(Text.translatable("immersivehotbar.option.bouncy_animation.desc"))
                                                .webpImage(Identifier.of("immersive-hotbar", "textures/gui/bouncy_animation.webp"))
                                                .build())
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(false, () -> bouncyAnimation, v -> bouncyAnimation = v)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.bounce_stiffness"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.bounce_stiffness.desc")))
                                        .controller(o -> FloatSliderControllerBuilder.create(o).range(0.1f, 1f).step(0.1f))
                                        .binding(0.3f, () -> bouncyStiffness, v -> bouncyStiffness = v)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.bounce_damping"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.bounce_damping.desc")))
                                        .controller(o -> FloatSliderControllerBuilder.create(o).range(0.1f, 0.8f).step(0.1f))
                                        .binding(0.2f, () -> bouncyDamping, v -> bouncyDamping = v)
                                        .build())
                                .build())

                        // Bounce Exceptions
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("immersivehotbar.group.bounce_exceptions"))
                                .description(OptionDescription.of(Text.translatable("immersivehotbar.group.bounce_exceptions.desc")))
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.tools_ignore_bounce"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.tools_ignore_bounce.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(false, () -> toolsIgnoreBounce, v -> toolsIgnoreBounce = v)
                                        .build())
                                .option(Option.<Boolean>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.weapons_ignore_bounce"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.weapons_ignore_bounce.desc")))
                                        .controller(TickBoxControllerBuilder::create)
                                        .binding(false, () -> weaponsIgnoreBounce, v -> weaponsIgnoreBounce = v)
                                        .build())
                                .build())

                        // Animation Tweaks
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("immersivehotbar.group.pop_effect"))
                                .description(OptionDescription.of(Text.translatable("immersivehotbar.group.pop_effect.desc")))
                                .option(Option.<Float>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.pop_scale"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.pop_scale.desc")))
                                        .controller(o -> FloatSliderControllerBuilder.create(o).range(0.1f, 0.9f).step(0.1f))
                                        .binding(0.5f, () -> animationIntensity, v -> animationIntensity = v)
                                        .build())
                                .option(Option.<Float>createBuilder()
                                        .name(Text.translatable("immersivehotbar.option.animation_smoothness"))
                                        .description(OptionDescription.of(Text.translatable("immersivehotbar.option.animation_smoothness.desc")))
                                        .controller(o -> FloatSliderControllerBuilder.create(o).range(0.1f, 1.0f).step(0.1f))
                                        .binding(0.1f, () -> animationSpeed, v -> animationSpeed = v)
                                        .build())
                                .build())
                        .build())
                .save(ImmersiveHotbarConfigHandler.HANDLER::save)
                .build()
                .generateScreen(parent);
    }
}
